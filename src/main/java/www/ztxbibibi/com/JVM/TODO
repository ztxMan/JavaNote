//TODO
lets start to learn something about JVM

what is jvm

 把.java .kt 等多种语音编译成字节码
 再由jvm解释机器码 调用操作系统函数接口

通过对字节码进行解释执行调用操作系统函数

字节码指令集介绍:
https://cloud.tencent.com/developer/article/1333540

.java ---> (javac) .class ---> classloader(类加载器) ---> 运行时数据区


运行时数据区的构成
（线程私有部分，跟随线程的生命周期）
1.虚拟机栈   java 方法调用锁分配的内存空间
2.本地方法栈   C/C++ 方法调用的内存空间 (在hotspot中的实现和虚拟机栈统一为一个栈)
3.程序计数器

（线程共享部分）
1.方法区
2.堆（heap）

？理解静态
静态的方法，变量 是属于类的 再类加载的时候被初始化在方法区 中的内存区域
静态方法不能直接引用 非静态的方法和变量 需要通过对象的实例进行引用

程序计数器
指向当前线程正在 执行的字节码指令地址
为什么需要程序计数器？  ----     操作系统的 多线程的时间片轮转 用于程序运行时被切出时间片时用于记录代码执行的地址
**唯一不会OOM 的内存区 （很小的一块内存区域）

虚拟机栈（先进后出-弹夹结构）
存储当前线程运行时所需的数据，指令，返回地址
栈帧---
      局部变量表   -- 8大基础数据类型+引用
      操作数栈     -- 方法的执行操作
      动态链接     -- （多态：静态分派，动态分派）
      返回地址     --


**操作数栈 Java 的解释执行时基于（操作数栈），c\c++基于寄存器运算
java 兼容性好，效率偏低
c 快，但是得make install


































